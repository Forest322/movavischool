from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "—Ç–æ–∫–µ–Ω"
ADMIN_ID = 123456789
DB_NAME = "bot_database.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            role TEXT NOT NULL,
            username TEXT
        )
    """)
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def save_user(user_id, role, username=None):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (id, role, username) VALUES (?, ?, ?)", 
                  (user_id, role, username))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_role(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data='teacher')],
        [InlineKeyboardButton("–Ø –∫—É—Ä–∞—Ç–æ—Ä", callback_data='curator')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:', reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(
            text='–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:',
            reply_markup=reply_markup
        )

# ===== –§–£–ù–ö–¶–ò–ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø =====

async def teacher_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    save_user(query.from_user.id, "teacher", query.from_user.username)
    
    keyboard = [
        [InlineKeyboardButton("–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='teacher_about')],
        [InlineKeyboardButton("–°—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data='teacher_structure')],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ –∫—É—Ä—Å–æ–≤", callback_data='teacher_courses')],
        [InlineKeyboardButton("–ü–∞—Ä—Ç–Ω–µ—Ä—ã", callback_data='teacher_partners')],
        [InlineKeyboardButton("–ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data='teacher_motivation')],
        [InlineKeyboardButton("–ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã", callback_data='teacher_method')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]
    ]
    await query.edit_message_text(
        text="–ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def teacher_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = "üìö –û –∫–æ–º–ø–∞–Ω–∏–∏:\n\n–ú—ã - –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞..."
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", url="https://example.com/about")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_teacher')]
    ]
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def teacher_structure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = "üè¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n1. –£—á–µ–±–Ω—ã–π –æ—Ç–¥–µ–ª\n2. –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª..."
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://example.com/structure")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_teacher')]
    ]
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def teacher_courses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã", url="https://example.com/main_courses")],
        [InlineKeyboardButton("–õ–µ—Ç–Ω—è—è —à–∫–æ–ª–∞", url="https://example.com/summer_school")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_teacher')]
    ]
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ä—Å–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def teacher_partners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–†–û–°–¢", callback_data='teacher_rost')],
        [InlineKeyboardButton("–ü–†–û–°–ö–£–õ", callback_data='teacher_proskul')],
        [InlineKeyboardButton("10-—è –≥–∏–º–Ω–∞–∑–∏—è", callback_data='teacher_gym10')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_teacher')]
    ]
    await query.edit_message_text(
        text="–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def teacher_rost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–û–ª–∏–º–ø–∏–∞–¥–∞", url="https://example.com/rost/olympiad")],
        [InlineKeyboardButton("–ö—É—Ä—Å—ã", url="https://example.com/rost/courses")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º", callback_data='teacher_partners')]
    ]
    await query.edit_message_text(
        text="–†–û–°–¢ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def teacher_proskul(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å—ã", url="https://example.com/proskul/courses")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º", callback_data='teacher_partners')]
    ]
    await query.edit_message_text(
        text="–ü–†–û–°–ö–£–õ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def teacher_gym10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å—ã", url="https://example.com/gym10/courses")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º", callback_data='teacher_partners')]
    ]
    await query.edit_message_text(
        text="10-—è –≥–∏–º–Ω–∞–∑–∏—è - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def teacher_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", url="https://example.com/motivation/feedback")],
        [InlineKeyboardButton("–ú–æ–≤–∞–≤–∏ Boost", url="https://example.com/motivation/movavi")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_teacher')]
    ]
    await query.edit_message_text(
        text="–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def teacher_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        text="–ù–∞—à –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞", url="https://example.com/method")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_teacher')]
        ])
    )

# ===== –§–£–ù–ö–¶–ò–ò –ö–£–†–ê–¢–û–†–ê =====

async def curator_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    save_user(query.from_user.id, "curator", query.from_user.username)
    
    keyboard = [
        [InlineKeyboardButton("–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='curator_about')],
        [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç", callback_data='curator_instructions')],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ –∫—É—Ä—Å–æ–≤", callback_data='curator_courses')],
        [InlineKeyboardButton("–°—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data='curator_structure')],
        [InlineKeyboardButton("–ü–∞—Ä—Ç–Ω–µ—Ä—ã", callback_data='curator_partners')],
        [InlineKeyboardButton("–ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data='curator_motivation')],
        [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã", callback_data='curator_phones')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]
    ]
    await query.edit_message_text(
        text="–ú–µ–Ω—é –∫—É—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def curator_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_curator')]
        ])
    )

async def curator_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç", url="https://example.com/guide/document-flow")],
        [InlineKeyboardButton("–ö–∞—Å—Å–∞", url="https://example.com/guide/cash-register")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_curator')]
    ]
    await query.edit_message_text(
        text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def curator_courses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–õ–µ—Ç–Ω—è—è —à–∫–æ–ª–∞", url="https://example.com/courses/summer")],
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã", url="https://example.com/courses/main")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_curator')]
    ]
    await query.edit_message_text(
        text="–ö–∞—Ä—Ç–∞ –∫—É—Ä—Å–æ–≤ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def curator_structure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        text="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://example.com/structure")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_curator')]
        ])
    )

async def curator_partners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–†–û–°–¢", callback_data='curator_rost')],
        [InlineKeyboardButton("–ü–†–û–°–ö–£–õ", callback_data='curator_proskul')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_curator')]
    ]
    await query.edit_message_text(
        text="–ü–∞—Ä—Ç–Ω–µ—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def curator_rost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–û–ª–∏–º–ø–∏–∞–¥–∞", url="https://example.com/rost/olympiad")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º", callback_data='curator_partners')]
    ]
    await query.edit_message_text(
        text="–†–û–°–¢ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def curator_proskul(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å—ã", url="https://example.com/proskul/courses")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º", callback_data='curator_partners')]
    ]
    await query.edit_message_text(
        text="–ü–†–û–°–ö–£–õ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def curator_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", url="https://example.com/motivation/feedback")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_curator')]
    ]
    await query.edit_message_text(
        text="–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def curator_phones(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        text="–ü–æ–ª–µ–∑–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", url="https://example.com/phones")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_curator')]
        ])
    )

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö =====

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    handlers = {
        'teacher': teacher_menu,
        'curator': curator_menu,
        'back_to_teacher': teacher_menu,
        'back_to_curator': curator_menu,
        'back_to_start': start,
        'teacher_about': teacher_about,
        'teacher_structure': teacher_structure,
        'teacher_courses': teacher_courses,
        'teacher_partners': teacher_partners,
        'teacher_motivation': teacher_motivation,
        'teacher_method': teacher_method,
        'teacher_rost': teacher_rost,
        'teacher_proskul': teacher_proskul,
        'teacher_gym10': teacher_gym10,
        'curator_about': curator_about,
        'curator_instructions': curator_instructions,
        'curator_courses': curator_courses,
        'curator_structure': curator_structure,
        'curator_partners': curator_partners,
        'curator_motivation': curator_motivation,
        'curator_phones': curator_phones,
        'curator_rost': curator_rost,
        'curator_proskul': curator_proskul
    }
    
    if query.data in handlers:
        await handlers[query.data](update, context)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====

def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(button_click))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()